name: Cloudcore IAC

on:
    push:
      branches: 
        - master
      paths: 
        - terraform/**
    pull_request:
      branches: 
        - master
      paths: 
        - terraform/**
env:
    # credentials for deployment to AWS
    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    # S3 bucket for the terraform state. 
    BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}
    AWS_REGION: us-east-1
    EKS_CLUSTER: quizapp-eks

jobs:
    terraform:
        name: "Apply terraform code changes"
        runs-on: ubuntu-latest
        defaults:
            run:
                shell: bash
                working-directory: ./terraform
        steps:
        - name: Checkout source code 
          uses: actions/checkout@v4

        - name: Setup Terraform with specified version on the runner
          uses: hashicorp/setup-terraform@v3

        - name: Terraform Init
          id: init
          run: terraform init -backend-config "bucket=$BUCKET_TF_STATE"

        - name: Terraform Format
          id: fmt
          run: terraform fmt -check
          continue-on-error: true 

        - name: Terraform Validate
          id: validate
          run: terraform validate

        - name: Terraform Plan
          id: plan
          run: terraform plan -no-color -input=false -out planfile
          continue-on-error: true 

        - name: Terraform Plan Status 
          if: steps.plan.outcome == 'failure'
          run: exit 1

        - name: Terraform Apply
          id: apply
          if: github.ref == 'refs/heads/master' && github.event_name == 'push'
          run: terraform apply -auto-approve -input=false -parallelism=1 planfile


    aws-job:
        needs: terraform
        name: Deploy Load Balancer Controller
        runs-on: ubuntu-latest
        steps:
        - name: Configure AWS Credential
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ env.AWS_REGION }}

        - name: Get kube config file
          id: getconfig
          run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }}

        - name: Configure Load Balancer
          run: curl -O https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.5.4/docs/install/iam_policy.json
          
        - name: Create IAM policy
          run: aws iam create-policy --policy-name AWSLoadBalancerControllerIAMPolicy --policy-document file://iam_policy.json
        
        - name: Install eksctl
          run: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin

        - name: Create OIDC Provider
          run: eksctl utils associate-iam-oidc-provider --region=${{ env.AWS_REGION }} --cluster=${{ env.EKS_CLUSTER }} --approve

        - name: Create Service Account
          run: eksctl create iamserviceaccount --cluster=${{ env.EKS_CLUSTER}} --namespace=kube-system --name=aws-load-balancer-controller --role-name AmazonEKSLoadBalancerControllerRole --attach-policy-arn=arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:policy/AWSLoadBalancerControllerIAMPolicy --approve --region=${{ env.AWS_REGION}}

        - name: Deploy AWS Load Balancer Controller
          run: |
            sudo snap install helm --classic
            helm repo add eks https://aws.github.io/eks-charts
            helm repo update eks
            helm install aws-load-balancer-controller eks/aws-load-balancer-controller -n kube-system --set clusterName=my-cluster --set serviceAccount.create=false --set serviceAccount.name=aws-load-balancer-controller